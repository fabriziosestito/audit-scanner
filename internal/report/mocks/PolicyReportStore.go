// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	report "github.com/kubewarden/audit-scanner/internal/report"
	mock "github.com/stretchr/testify/mock"
)

// PolicyReportStore is an autogenerated mock type for the PolicyReportStore type
type PolicyReportStore struct {
	mock.Mock
}

type PolicyReportStore_Expecter struct {
	mock *mock.Mock
}

func (_m *PolicyReportStore) EXPECT() *PolicyReportStore_Expecter {
	return &PolicyReportStore_Expecter{mock: &_m.Mock}
}

// GetClusterPolicyReport provides a mock function with given fields: name
func (_m *PolicyReportStore) GetClusterPolicyReport(name string) (report.ClusterPolicyReport, error) {
	ret := _m.Called(name)

	var r0 report.ClusterPolicyReport
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (report.ClusterPolicyReport, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) report.ClusterPolicyReport); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(report.ClusterPolicyReport)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PolicyReportStore_GetClusterPolicyReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetClusterPolicyReport'
type PolicyReportStore_GetClusterPolicyReport_Call struct {
	*mock.Call
}

// GetClusterPolicyReport is a helper method to define mock.On call
//   - name string
func (_e *PolicyReportStore_Expecter) GetClusterPolicyReport(name interface{}) *PolicyReportStore_GetClusterPolicyReport_Call {
	return &PolicyReportStore_GetClusterPolicyReport_Call{Call: _e.mock.On("GetClusterPolicyReport", name)}
}

func (_c *PolicyReportStore_GetClusterPolicyReport_Call) Run(run func(name string)) *PolicyReportStore_GetClusterPolicyReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PolicyReportStore_GetClusterPolicyReport_Call) Return(_a0 report.ClusterPolicyReport, _a1 error) *PolicyReportStore_GetClusterPolicyReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PolicyReportStore_GetClusterPolicyReport_Call) RunAndReturn(run func(string) (report.ClusterPolicyReport, error)) *PolicyReportStore_GetClusterPolicyReport_Call {
	_c.Call.Return(run)
	return _c
}

// GetPolicyReport provides a mock function with given fields: namespace
func (_m *PolicyReportStore) GetPolicyReport(namespace string) (report.PolicyReport, error) {
	ret := _m.Called(namespace)

	var r0 report.PolicyReport
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (report.PolicyReport, error)); ok {
		return rf(namespace)
	}
	if rf, ok := ret.Get(0).(func(string) report.PolicyReport); ok {
		r0 = rf(namespace)
	} else {
		r0 = ret.Get(0).(report.PolicyReport)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(namespace)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PolicyReportStore_GetPolicyReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPolicyReport'
type PolicyReportStore_GetPolicyReport_Call struct {
	*mock.Call
}

// GetPolicyReport is a helper method to define mock.On call
//   - namespace string
func (_e *PolicyReportStore_Expecter) GetPolicyReport(namespace interface{}) *PolicyReportStore_GetPolicyReport_Call {
	return &PolicyReportStore_GetPolicyReport_Call{Call: _e.mock.On("GetPolicyReport", namespace)}
}

func (_c *PolicyReportStore_GetPolicyReport_Call) Run(run func(namespace string)) *PolicyReportStore_GetPolicyReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PolicyReportStore_GetPolicyReport_Call) Return(_a0 report.PolicyReport, _a1 error) *PolicyReportStore_GetPolicyReport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PolicyReportStore_GetPolicyReport_Call) RunAndReturn(run func(string) (report.PolicyReport, error)) *PolicyReportStore_GetPolicyReport_Call {
	_c.Call.Return(run)
	return _c
}

// SaveClusterPolicyReport provides a mock function with given fields: _a0
func (_m *PolicyReportStore) SaveClusterPolicyReport(_a0 *report.ClusterPolicyReport) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*report.ClusterPolicyReport) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PolicyReportStore_SaveClusterPolicyReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveClusterPolicyReport'
type PolicyReportStore_SaveClusterPolicyReport_Call struct {
	*mock.Call
}

// SaveClusterPolicyReport is a helper method to define mock.On call
//   - _a0 *report.ClusterPolicyReport
func (_e *PolicyReportStore_Expecter) SaveClusterPolicyReport(_a0 interface{}) *PolicyReportStore_SaveClusterPolicyReport_Call {
	return &PolicyReportStore_SaveClusterPolicyReport_Call{Call: _e.mock.On("SaveClusterPolicyReport", _a0)}
}

func (_c *PolicyReportStore_SaveClusterPolicyReport_Call) Run(run func(_a0 *report.ClusterPolicyReport)) *PolicyReportStore_SaveClusterPolicyReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*report.ClusterPolicyReport))
	})
	return _c
}

func (_c *PolicyReportStore_SaveClusterPolicyReport_Call) Return(_a0 error) *PolicyReportStore_SaveClusterPolicyReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PolicyReportStore_SaveClusterPolicyReport_Call) RunAndReturn(run func(*report.ClusterPolicyReport) error) *PolicyReportStore_SaveClusterPolicyReport_Call {
	_c.Call.Return(run)
	return _c
}

// SavePolicyReport provides a mock function with given fields: _a0
func (_m *PolicyReportStore) SavePolicyReport(_a0 *report.PolicyReport) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*report.PolicyReport) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PolicyReportStore_SavePolicyReport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SavePolicyReport'
type PolicyReportStore_SavePolicyReport_Call struct {
	*mock.Call
}

// SavePolicyReport is a helper method to define mock.On call
//   - _a0 *report.PolicyReport
func (_e *PolicyReportStore_Expecter) SavePolicyReport(_a0 interface{}) *PolicyReportStore_SavePolicyReport_Call {
	return &PolicyReportStore_SavePolicyReport_Call{Call: _e.mock.On("SavePolicyReport", _a0)}
}

func (_c *PolicyReportStore_SavePolicyReport_Call) Run(run func(_a0 *report.PolicyReport)) *PolicyReportStore_SavePolicyReport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*report.PolicyReport))
	})
	return _c
}

func (_c *PolicyReportStore_SavePolicyReport_Call) Return(_a0 error) *PolicyReportStore_SavePolicyReport_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PolicyReportStore_SavePolicyReport_Call) RunAndReturn(run func(*report.PolicyReport) error) *PolicyReportStore_SavePolicyReport_Call {
	_c.Call.Return(run)
	return _c
}

// NewPolicyReportStore creates a new instance of PolicyReportStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPolicyReportStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *PolicyReportStore {
	mock := &PolicyReportStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
